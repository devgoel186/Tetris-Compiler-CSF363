
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'levelARRAY ARROW ARROWSIGN BLANKS BOARD BONUS COLORNAME COMMA COMMENT EQUALS HEXCOLOR IDENTIFIER INT LEFT_BRT LEFT_CURLY LEFT_SQR LEVEL MATRIX MOVECONFIG MULTIPLY PASSLEVELLINES PIECE PIECECOLOR RANDOM RES RIGHT_BRT RIGHT_CURLY RIGHT_SQR SCORING SEMICOLON SEQUENCE SETLEVELSPEED SIMULATANEOUS SKIPBLOCK SPEED STARTGAME WASD\n    level           : LEVEL IDENTIFIER ARROWSIGN\n                    | moveconfig SEMICOLON\n                    | setlevelspeed SEMICOLON\n                    | passlevellines SEMICOLON\n                    | board_assign SEMICOLON\n                    | piece_definition SEMICOLON\n                    | speed SEMICOLON\n                    | piececolor SEMICOLON\n                    | sequence_definition SEMICOLON\n                    | scoring SEMICOLON\n                    | random SEMICOLON\n                    | startgame SEMICOLON\n                    | empty\n    \n    setlevelspeed : SETLEVELSPEED LEFT_BRT INT RIGHT_BRT \n    \n    passlevellines : PASSLEVELLINES LEFT_BRT INT RIGHT_BRT \n    \n    moveconfig : MOVECONFIG LEFT_BRT WASD RIGHT_BRT \n               | MOVECONFIG LEFT_BRT ARROW RIGHT_BRT\n    \n    board_assign : BOARD EQUALS INT COMMA INT\n    \n    piece_definition : PIECE IDENTIFIER EQUALS matrix\n    \n    array : RIGHT_SQR group_of_types LEFT_SQR\n    \n    matrix : RIGHT_SQR group_of_arrays LEFT_SQR \n    \n    type : INT \n         | IDENTIFIER\n    \n    expression : IDENTIFIER\n               | IDENTIFIER MULTIPLY INT\n    \n    group_of_expressions : group_of_expressions COMMA expression\n                         | expression\n    \n    group_of_types : group_of_types COMMA type\n                   | type\n    \n    group_of_arrays : group_of_arrays COMMA array\n                    | array\n    \n    speed : SPEED LEFT_BRT IDENTIFIER COMMA INT RIGHT_BRT\n    \n    piececolor : PIECECOLOR LEFT_BRT IDENTIFIER COMMA COLORNAME RIGHT_BRT\n               | PIECECOLOR LEFT_BRT IDENTIFIER COMMA HEXCOLOR RIGHT_BRT\n    \n    sequence_definition : SEQUENCE IDENTIFIER EQUALS array\n    \n    scoring : SCORING EQUALS array\n    \n    random : RANDOM LEFT_BRT IDENTIFIER RIGHT_BRT\n           | RANDOM LEFT_BRT empty RIGHT_BRT\n    \n    startgame : STARTGAME LEFT_BRT group_of_expressions RIGHT_BRT\n    \n    empty :\n    '
    
_lr_action_items = {'LEVEL':([0,],[2,]),'MOVECONFIG':([0,],[15,]),'SETLEVELSPEED':([0,],[16,]),'PASSLEVELLINES':([0,],[17,]),'BOARD':([0,],[18,]),'PIECE':([0,],[19,]),'SPEED':([0,],[20,]),'PIECECOLOR':([0,],[21,]),'SEQUENCE':([0,],[22,]),'SCORING':([0,],[23,]),'RANDOM':([0,],[24,]),'STARTGAME':([0,],[25,]),'$end':([0,1,14,27,28,29,30,31,32,33,34,35,36,37,49,],[-40,0,-13,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-1,]),'IDENTIFIER':([2,19,22,43,44,47,48,60,83,92,],[26,42,45,56,57,61,65,79,65,79,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,59,66,67,68,69,71,75,80,81,82,85,91,95,97,98,99,],[27,28,29,30,31,32,33,34,35,36,37,-36,-16,-17,-14,-15,-19,-35,-37,-38,-39,-18,-20,-21,-32,-33,-34,]),'LEFT_BRT':([15,16,17,20,21,24,25,],[38,39,40,43,44,47,48,]),'EQUALS':([18,23,42,45,],[41,46,55,58,]),'ARROWSIGN':([26,],[49,]),'WASD':([38,],[50,]),'ARROW':([38,],[51,]),'INT':([39,40,41,60,70,73,84,92,],[52,53,54,78,85,88,94,78,]),'RIGHT_SQR':([46,55,58,72,96,],[60,72,60,60,60,]),'RIGHT_BRT':([47,50,51,52,53,61,62,63,64,65,88,89,90,93,94,],[-40,66,67,68,69,80,81,82,-27,-24,97,98,99,-26,-25,]),'COMMA':([54,56,57,63,64,65,76,77,78,79,86,87,91,93,94,100,101,],[70,73,74,83,-27,-24,92,-29,-22,-23,96,-31,-20,-26,-25,-28,-30,]),'MULTIPLY':([65,],[84,]),'COLORNAME':([74,],[89,]),'HEXCOLOR':([74,],[90,]),'LEFT_SQR':([76,77,78,79,86,87,91,100,101,],[91,-29,-22,-23,95,-31,-20,-28,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'level':([0,],[1,]),'moveconfig':([0,],[3,]),'setlevelspeed':([0,],[4,]),'passlevellines':([0,],[5,]),'board_assign':([0,],[6,]),'piece_definition':([0,],[7,]),'speed':([0,],[8,]),'piececolor':([0,],[9,]),'sequence_definition':([0,],[10,]),'scoring':([0,],[11,]),'random':([0,],[12,]),'startgame':([0,],[13,]),'empty':([0,47,],[14,62,]),'array':([46,58,72,96,],[59,75,87,101,]),'group_of_expressions':([48,],[63,]),'expression':([48,83,],[64,93,]),'matrix':([55,],[71,]),'group_of_types':([60,],[76,]),'type':([60,92,],[77,100,]),'group_of_arrays':([72,],[86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> level","S'",1,None,None,None),
  ('level -> LEVEL IDENTIFIER ARROWSIGN','level',3,'p_level','tetris_compiler.py',138),
  ('level -> moveconfig SEMICOLON','level',2,'p_level','tetris_compiler.py',139),
  ('level -> setlevelspeed SEMICOLON','level',2,'p_level','tetris_compiler.py',140),
  ('level -> passlevellines SEMICOLON','level',2,'p_level','tetris_compiler.py',141),
  ('level -> board_assign SEMICOLON','level',2,'p_level','tetris_compiler.py',142),
  ('level -> piece_definition SEMICOLON','level',2,'p_level','tetris_compiler.py',143),
  ('level -> speed SEMICOLON','level',2,'p_level','tetris_compiler.py',144),
  ('level -> piececolor SEMICOLON','level',2,'p_level','tetris_compiler.py',145),
  ('level -> sequence_definition SEMICOLON','level',2,'p_level','tetris_compiler.py',146),
  ('level -> scoring SEMICOLON','level',2,'p_level','tetris_compiler.py',147),
  ('level -> random SEMICOLON','level',2,'p_level','tetris_compiler.py',148),
  ('level -> startgame SEMICOLON','level',2,'p_level','tetris_compiler.py',149),
  ('level -> empty','level',1,'p_level','tetris_compiler.py',150),
  ('setlevelspeed -> SETLEVELSPEED LEFT_BRT INT RIGHT_BRT','setlevelspeed',4,'p_setlevelspeed','tetris_compiler.py',188),
  ('passlevellines -> PASSLEVELLINES LEFT_BRT INT RIGHT_BRT','passlevellines',4,'p_passlevellines','tetris_compiler.py',195),
  ('moveconfig -> MOVECONFIG LEFT_BRT WASD RIGHT_BRT','moveconfig',4,'p_moveconfig','tetris_compiler.py',202),
  ('moveconfig -> MOVECONFIG LEFT_BRT ARROW RIGHT_BRT','moveconfig',4,'p_moveconfig','tetris_compiler.py',203),
  ('board_assign -> BOARD EQUALS INT COMMA INT','board_assign',5,'p_board_assign','tetris_compiler.py',211),
  ('piece_definition -> PIECE IDENTIFIER EQUALS matrix','piece_definition',4,'p_piece_definition','tetris_compiler.py',218),
  ('array -> RIGHT_SQR group_of_types LEFT_SQR','array',3,'p_array','tetris_compiler.py',227),
  ('matrix -> RIGHT_SQR group_of_arrays LEFT_SQR','matrix',3,'p_matrix','tetris_compiler.py',233),
  ('type -> INT','type',1,'p_type','tetris_compiler.py',239),
  ('type -> IDENTIFIER','type',1,'p_type','tetris_compiler.py',240),
  ('expression -> IDENTIFIER','expression',1,'p_expression','tetris_compiler.py',246),
  ('expression -> IDENTIFIER MULTIPLY INT','expression',3,'p_expression','tetris_compiler.py',247),
  ('group_of_expressions -> group_of_expressions COMMA expression','group_of_expressions',3,'p_group_of_expressions','tetris_compiler.py',256),
  ('group_of_expressions -> expression','group_of_expressions',1,'p_group_of_expressions','tetris_compiler.py',257),
  ('group_of_types -> group_of_types COMMA type','group_of_types',3,'p_group_of_types','tetris_compiler.py',271),
  ('group_of_types -> type','group_of_types',1,'p_group_of_types','tetris_compiler.py',272),
  ('group_of_arrays -> group_of_arrays COMMA array','group_of_arrays',3,'p_group_of_arrays','tetris_compiler.py',286),
  ('group_of_arrays -> array','group_of_arrays',1,'p_group_of_arrays','tetris_compiler.py',287),
  ('speed -> SPEED LEFT_BRT IDENTIFIER COMMA INT RIGHT_BRT','speed',6,'p_speed','tetris_compiler.py',302),
  ('piececolor -> PIECECOLOR LEFT_BRT IDENTIFIER COMMA COLORNAME RIGHT_BRT','piececolor',6,'p_piececolor','tetris_compiler.py',309),
  ('piececolor -> PIECECOLOR LEFT_BRT IDENTIFIER COMMA HEXCOLOR RIGHT_BRT','piececolor',6,'p_piececolor','tetris_compiler.py',310),
  ('sequence_definition -> SEQUENCE IDENTIFIER EQUALS array','sequence_definition',4,'p_sequence_definition','tetris_compiler.py',317),
  ('scoring -> SCORING EQUALS array','scoring',3,'p_scoring','tetris_compiler.py',324),
  ('random -> RANDOM LEFT_BRT IDENTIFIER RIGHT_BRT','random',4,'p_random','tetris_compiler.py',331),
  ('random -> RANDOM LEFT_BRT empty RIGHT_BRT','random',4,'p_random','tetris_compiler.py',332),
  ('startgame -> STARTGAME LEFT_BRT group_of_expressions RIGHT_BRT','startgame',4,'p_startgame','tetris_compiler.py',344),
  ('empty -> <empty>','empty',0,'p_empty','tetris_compiler.py',351),
]
